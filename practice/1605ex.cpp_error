#include <vector>
#include <iostream>
#include <string>
#include <algorithm>
#include <iterator>
#include <list>

using std::string;
using namespace std;


void out1(long n)
{
	cout << n << " ";
}
int reduce1(long ar[], int n)
{
	list<long> listLong;
	listLong.insert(listLong.begin(), ar, ar+n);		
	
	// 排序
	listLong.sort();

	// list<long>::iterator it;
	//for(it = listLong.begin(); it != listLong.end(); it++) { cout << *it << " "; } cout << endl;
	for_each(listLong.begin(), listLong.end(), out1);
	cout << endl;

	// 去重复
	listLong.unique();
	//for(it = listLong.begin(); it != listLong.end(); it++) { cout << *it << " "; } cout << endl;
	for_each(listLong.begin(), listLong.end(), out1);
	cout << endl;

	return 0;
}

template <class T>
void out(T n)
{
	cout << n << ", ";
}

template <class T>
int reduce(T ar[], int n)
{
	list<T> listType;
	listType.insert(listType.begin(), ar, ar+n);
	listType.sort();
	// for_each(listType.begin(), listType.end(), out);
	
}

int main(void)
{
	long ar[] = {3, 4, 5, 2, 1,1,2,8,9,10,1};
	int n = sizeof(ar)/sizeof(long);

	cout << "原数组n: " << n << endl;
	for(int i = 0; i < n; i++)
	{
		cout << ar[i] << " ";
	}
	cout << endl;
	reduce(ar, n);

	for(int i = 0; i < n; i++)
	{
		cout << ar[i] << " ";
	}
	cout << endl;

	return 0;
}
